// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rating/service/v1/rating.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAggregatedRatingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAggregatedRatingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAggregatedRatingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAggregatedRatingRequestMultiError, or nil if none found.
func (m *GetAggregatedRatingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAggregatedRatingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordType

	// no validation rules for RecordId

	if len(errors) > 0 {
		return GetAggregatedRatingRequestMultiError(errors)
	}

	return nil
}

// GetAggregatedRatingRequestMultiError is an error wrapping multiple
// validation errors returned by GetAggregatedRatingRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAggregatedRatingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAggregatedRatingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAggregatedRatingRequestMultiError) AllErrors() []error { return m }

// GetAggregatedRatingRequestValidationError is the validation error returned
// by GetAggregatedRatingRequest.Validate if the designated constraints aren't met.
type GetAggregatedRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAggregatedRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAggregatedRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAggregatedRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAggregatedRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAggregatedRatingRequestValidationError) ErrorName() string {
	return "GetAggregatedRatingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAggregatedRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAggregatedRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAggregatedRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAggregatedRatingRequestValidationError{}

// Validate checks the field values on GetAggregatedRatingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAggregatedRatingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAggregatedRatingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAggregatedRatingResponseMultiError, or nil if none found.
func (m *GetAggregatedRatingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAggregatedRatingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgRating

	if len(errors) > 0 {
		return GetAggregatedRatingResponseMultiError(errors)
	}

	return nil
}

// GetAggregatedRatingResponseMultiError is an error wrapping multiple
// validation errors returned by GetAggregatedRatingResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAggregatedRatingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAggregatedRatingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAggregatedRatingResponseMultiError) AllErrors() []error { return m }

// GetAggregatedRatingResponseValidationError is the validation error returned
// by GetAggregatedRatingResponse.Validate if the designated constraints
// aren't met.
type GetAggregatedRatingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAggregatedRatingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAggregatedRatingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAggregatedRatingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAggregatedRatingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAggregatedRatingResponseValidationError) ErrorName() string {
	return "GetAggregatedRatingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAggregatedRatingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAggregatedRatingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAggregatedRatingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAggregatedRatingResponseValidationError{}

// Validate checks the field values on Rating with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Rating) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rating with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RatingMultiError, or nil if none found.
func (m *Rating) ValidateAll() error {
	return m.validate(true)
}

func (m *Rating) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecordType

	// no validation rules for RecordId

	// no validation rules for UserId

	// no validation rules for RatingValue

	if len(errors) > 0 {
		return RatingMultiError(errors)
	}

	return nil
}

// RatingMultiError is an error wrapping multiple validation errors returned by
// Rating.ValidateAll() if the designated constraints aren't met.
type RatingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RatingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RatingMultiError) AllErrors() []error { return m }

// RatingValidationError is the validation error returned by Rating.Validate if
// the designated constraints aren't met.
type RatingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RatingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RatingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RatingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RatingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RatingValidationError) ErrorName() string { return "RatingValidationError" }

// Error satisfies the builtin error interface
func (e RatingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRating.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RatingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RatingValidationError{}

// Validate checks the field values on CreateRatingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRatingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRatingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRatingRequestMultiError, or nil if none found.
func (m *CreateRatingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRatingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRating()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRatingRequestValidationError{
					field:  "Rating",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRatingRequestValidationError{
					field:  "Rating",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRating()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRatingRequestValidationError{
				field:  "Rating",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRatingRequestMultiError(errors)
	}

	return nil
}

// CreateRatingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRatingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRatingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRatingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRatingRequestMultiError) AllErrors() []error { return m }

// CreateRatingRequestValidationError is the validation error returned by
// CreateRatingRequest.Validate if the designated constraints aren't met.
type CreateRatingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRatingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRatingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRatingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRatingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRatingRequestValidationError) ErrorName() string {
	return "CreateRatingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRatingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRatingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRatingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRatingRequestValidationError{}

// Validate checks the field values on CreateRatingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRatingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRatingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRatingResponseMultiError, or nil if none found.
func (m *CreateRatingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRatingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRatingResponseMultiError(errors)
	}

	return nil
}

// CreateRatingResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRatingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateRatingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRatingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRatingResponseMultiError) AllErrors() []error { return m }

// CreateRatingResponseValidationError is the validation error returned by
// CreateRatingResponse.Validate if the designated constraints aren't met.
type CreateRatingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRatingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRatingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRatingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRatingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRatingResponseValidationError) ErrorName() string {
	return "CreateRatingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRatingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRatingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRatingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRatingResponseValidationError{}

// Validate checks the field values on PushMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PushMsgMultiError, or nil if none found.
func (m *PushMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *PushMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Key

	// no validation rules for Msg

	if len(errors) > 0 {
		return PushMsgMultiError(errors)
	}

	return nil
}

// PushMsgMultiError is an error wrapping multiple validation errors returned
// by PushMsg.ValidateAll() if the designated constraints aren't met.
type PushMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushMsgMultiError) AllErrors() []error { return m }

// PushMsgValidationError is the validation error returned by PushMsg.Validate
// if the designated constraints aren't met.
type PushMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushMsgValidationError) ErrorName() string { return "PushMsgValidationError" }

// Error satisfies the builtin error interface
func (e PushMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushMsgValidationError{}
