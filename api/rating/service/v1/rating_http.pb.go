// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.12.4
// source: rating/service/v1/rating.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRatingServiceCreateRating = "/rating.service.v1.RatingService/CreateRating"
const OperationRatingServiceGetAggregatedRating = "/rating.service.v1.RatingService/GetAggregatedRating"

type RatingServiceHTTPServer interface {
	CreateRating(context.Context, *CreateRatingRequest) (*CreateRatingResponse, error)
	GetAggregatedRating(context.Context, *GetAggregatedRatingRequest) (*GetAggregatedRatingResponse, error)
}

func RegisterRatingServiceHTTPServer(s *http.Server, srv RatingServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/rating", _RatingService_GetAggregatedRating0_HTTP_Handler(srv))
	r.POST("/v1/rating", _RatingService_CreateRating0_HTTP_Handler(srv))
}

func _RatingService_GetAggregatedRating0_HTTP_Handler(srv RatingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAggregatedRatingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRatingServiceGetAggregatedRating)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAggregatedRating(ctx, req.(*GetAggregatedRatingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAggregatedRatingResponse)
		return ctx.Result(200, reply)
	}
}

func _RatingService_CreateRating0_HTTP_Handler(srv RatingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRatingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRatingServiceCreateRating)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRating(ctx, req.(*CreateRatingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRatingResponse)
		return ctx.Result(200, reply)
	}
}

type RatingServiceHTTPClient interface {
	CreateRating(ctx context.Context, req *CreateRatingRequest, opts ...http.CallOption) (rsp *CreateRatingResponse, err error)
	GetAggregatedRating(ctx context.Context, req *GetAggregatedRatingRequest, opts ...http.CallOption) (rsp *GetAggregatedRatingResponse, err error)
}

type RatingServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRatingServiceHTTPClient(client *http.Client) RatingServiceHTTPClient {
	return &RatingServiceHTTPClientImpl{client}
}

func (c *RatingServiceHTTPClientImpl) CreateRating(ctx context.Context, in *CreateRatingRequest, opts ...http.CallOption) (*CreateRatingResponse, error) {
	var out CreateRatingResponse
	pattern := "/v1/rating"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRatingServiceCreateRating))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RatingServiceHTTPClientImpl) GetAggregatedRating(ctx context.Context, in *GetAggregatedRatingRequest, opts ...http.CallOption) (*GetAggregatedRatingResponse, error) {
	var out GetAggregatedRatingResponse
	pattern := "/v1/rating"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRatingServiceGetAggregatedRating))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
